from django.db import models
from rest_framework.fields import JSONField

STATUS_CHOICES = (
    ('0', 'Draft'),
    ('1', 'Submitted'),
    ('2', 'Approved'),
)

QAQC_STATUS_CHOICES = (
('0', 'None'),
    ('1', 'Preliminary QA-QC'),
    ('2', 'Full QA-QC'),
)


class MeasurementVariable(models.Model):

    name = models.CharField(max_length=50,unique=True)


class Contact(models.Model):
    firstName = models.CharField(max_length=50)
    lastName = models.CharField(max_length=50)
    email = models.EmailField()
    institutionAffiliation = models.CharField(max_length=100)


class Site(models.Model):
    name = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    country = models.CharField(max_length=50)
    stateProvince = models.CharField(max_length=50)
    utcOffset = models.IntegerField()
    latitude = models.FloatField()
    longitude = models.FloatField()
    elevation = models.FloatField()
    siteUrl = models.CharField(max_length=100)
    coordinates = JSONField
    contact = models.ForeignKey(Contact, on_delete=models.DO_NOTHING)
    pi = models.ForeignKey(Contact, on_delete=models.DO_NOTHING,related_name='+')


class Plot(models.Model):
    name = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    size = models.CharField(max_length=100)
    plotMapUrl = models.CharField(max_length=100)
    elevation = models.FloatField()
    pi = models.ForeignKey(Contact, on_delete=models.DO_NOTHING)
    site = models.ForeignKey(Site, on_delete=models.DO_NOTHING)


class DataSet(models.Model):
    # TODO: understand how dataset Id is generated
    dataSetID = models.CharField(max_length=20)
    status = models.CharField(max_length=1, choices=STATUS_CHOICES)  #(draft, submitted, approved)
    statusComment = models.TextField()
    name = models.CharField(unique=True, max_length=50)
    description = models.TextField()
    doi = models.TextField()
    contact = models.ForeignKey(Contact, on_delete=models.DO_NOTHING)

    # TODO - does this need to be a datetime?
    startDate = models.DateField()
    endDate = models.DateField()

    qaQCStatus = models.CharField(max_length=1, choices=QAQC_STATUS_CHOICES)
    qaQCMethodDescription = models.TextField()
    ngeeTropicsResources = models.BooleanField()
    fundingOrganizations = models.TextField()
    doeFundingContractNumbers = models.CharField(max_length=100)
    acknowledgement = models.TextField()
    reference = models.TextField()
    additionalReferenceInformation = models.TextField()

    # TODO: Access levels: public, private, NGEE Tropics
    #accessLevel = models.CharField(max_length=1, choices=)
    additionalAccessInformation = models.TextField()
    submissionDate = models.DateTimeField(auto_created=True)
    lastModifiedDate = models.DateTimeField(auto_now=True)

    # TODO - figure out how to have created by and modified by users
    # createdBy
    # modifiedBy
    file = models.FileField()

    # Relationships
    sites = models.ManyToManyField(Site)
    plots = models.ManyToManyField(Plot)
    variables = models.ManyToManyField(MeasurementVariable)

